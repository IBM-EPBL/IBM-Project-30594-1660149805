#Integrating Sendgrid Services
import os
import json
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import *
# NOTE: you will need move this file to the root
# directory of this project to execute properly.
def build_hello_email():
## Send a Single Email to a Single Recipient
message = Mail(from_email=From('from@example.com', 'Example From Name'),
to_emails=To('to@example.com', 'Example To Name'),
subject=Subject('Sending with SendGrid is Fun'),
plain_text_content=PlainTextContent('and easy to do anywhere, even with Python'),
html_content=HtmlContent('<strong>and easy to do anywhere, even with Python</strong>'))
try:
print(json.dumps(message.get(), sort_keys=True, indent=4))
return message.get()
except SendGridException as e:
print(e.message)
mock_personalization = Personalization()
personalization_dict = get_mock_personalization_dict()
for cc_addr in personalization_dict['cc_list']:
mock_personalization.add_to(cc_addr)
for bcc_addr in personalization_dict['bcc_list']:
mock_personalization.add_bcc(bcc_addr)
for header in personalization_dict['headers']:
mock_personalization.add_header(header)
for substitution in personalization_dict['substitutions']:
mock_personalization.add_substitution(substitution)
for arg in personalization_dict['custom_args']:
mock_personalization.add_custom_arg(arg)
mock_personalization.subject = personalization_dict['subject']
mock_personalization.send_at = personalization_dict['send_at']
message.add_personalization(mock_personalization)
return message
def get_mock_personalization_dict():
"""Get a dict of personalization mock."""
mock_pers = dict()
mock_pers['to_list'] = [To("test1@example.com",
"Example User"),
To("test2@example.com",
"Example User")]
mock_pers['cc_list'] = [To("test3@example.com",
"Example User"),
To("test4@example.com",
"Example User")]
mock_pers['bcc_list'] = [To("test5@example.com"),
To("test6@example.com")]
mock_pers['subject'] = ("Hello World from the Personalized "
"SendGrid Python Library")
mock_pers['headers'] = [Header("X-Test", "test"),
Header("X-Mock", "true")]
mock_pers['substitutions'] = [Substitution("%name%", "Example User"),
Substitution("%city%", "Denver")]
mock_pers['custom_args'] = [CustomArg("user_id", "343"),
CustomArg("type", "marketing")]
mock_pers['send_at'] = 1443636843
return mock_pers
def build_multiple_emails_personalized():
# Note that the domain for all From email addresses must match
message = Mail(from_email=From('from@example.com', 'Example From Name'),
subject=Subject('Sending with SendGrid is Fun'),
plain_text_content=PlainTextContent('and easy to do anywhere, even with Python'),
html_content=HtmlContent('<strong>and easy to do anywhere, even with Python</strong>'))
mock_personalization = Personalization()
mock_personalization.add_to(To('test@example.com', 'Example User 1'))
mock_personalization.add_cc(Cc('test1@example.com', 'Example User 2'))
message.add_personalization(mock_personalization)
mock_personalization_2 = Personalization()
mock_personalization_2.add_to(To('test2@example.com', 'Example User 3'))
mock_personalization_2.set_from(From('from@example.com', 'Example From Name 2'))
mock_personalization_2.add_bcc(Bcc('test3@example.com', 'Example User 4'))
message.add_personalization(mock_personalization_2)
try:
print(json.dumps(message.get(), sort_keys=True, indent=4))
return message.get()
except SendGridException as e:
print(e.message)
return message
def build_attachment1():
"""Build attachment mock. Make sure your content is base64 encoded before passing into
attachment.content.
Another example:
https://github.com/sendgrid/sendgrid-python/blob/HEAD/use_cases/attachment.md"""
attachment = Attachment()
attachment.file_content = ("TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNl"
"Y3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12")
attachment.file_type = "application/pdf"
attachment.file_name = "balance_001.pdf"
attachment.disposition = "attachment"
attachment.content_id = "Balance Sheet"
return attachment
def build_attachment2():
"""Build attachment mock."""
attachment = Attachment()
attachment.file_content = "BwdW"
attachment.file_type = "image/png"
attachment.file_name = "banner.png"
attachment.disposition = "inline"
attachment.content_id = "Banner"
return attachment
def build_kitchen_sink():
"""All settings set"""
from sendgrid.helpers.mail import (
Mail, From, To, Cc, Bcc, Subject, PlainTextContent,
HtmlContent, SendGridException, Substitution,
Header, CustomArg, SendAt, Content, MimeType, Attachment,
FileName, FileContent, FileType, Disposition, ContentId,
TemplateId, Section, ReplyTo, Category, BatchId, Asm,
GroupId, GroupsToDisplay, IpPoolName, MailSettings,
BccSettings, BccSettingsEmail, BypassListManagement,
FooterSettings, FooterText, FooterHtml, SandBoxMode,
SpamCheck, SpamThreshold, SpamUrl, TrackingSettings,
ClickTracking, SubscriptionTracking, SubscriptionText,
SubscriptionHtml, SubscriptionSubstitutionTag,
OpenTracking, OpenTrackingSubstitutionTag, Ganalytics,
UtmSource, UtmMedium, UtmTerm, UtmContent, UtmCampaign)
import time
import datetime
message = Mail()
# Define Personalizations
message.to = To('test1@sendgrid.com', 'Example User1', p=0)
message.to = [
To('test2@sendgrid.com', 'Example User2', p=0),
To('test3@sendgrid.com', 'Example User3', p=0)
]
message.cc = Cc('test4@example.com', 'Example User4', p=0)
message.cc = [
Cc('test5@example.com', 'Example User5', p=0),
Cc('test6@example.com', 'Example User6', p=0)
]
message.bcc = Bcc('test7@example.com', 'Example User7', p=0)
message.bcc = [
Bcc('test8@example.com', 'Example User8', p=0),
Bcc('test9@example.com', 'Example User9', p=0)
]
message.subject = Subject('Sending with SendGrid is Fun 0', p=0)
message.header = Header('X-Test1', 'Test1', p=0)
message.header = Header('X-Test2', 'Test2', p=0)
message.header = [
Header('X-Test3', 'Test3', p=0),
Header('X-Test4', 'Test4', p=0)
]
message.substitution = Substitution('%name1%', 'Example Name 1', p=0)
message.substitution = Substitution('%city1%', 'Example City 1', p=0)
message.substitution = [
Substitution('%name2%', 'Example Name 2', p=0),
Substitution('%city2%', 'Example City 2', p=0)
]
message.custom_arg = CustomArg('marketing1', 'true', p=0)
message.custom_arg = CustomArg('transactional1', 'false', p=0)
message.custom_arg = [
CustomArg('marketing2', 'false', p=0),
CustomArg('transactional2', 'true', p=0)
]
message.send_at = SendAt(1461775051, p=0)
message.to = To('test10@example.com', 'Example User10', p=1)
message.to = [
To('test11@example.com', 'Example User11', p=1),
To('test12@example.com', 'Example User12', p=1)
]
message.cc = Cc('test13@example.com', 'Example User13', p=1)
message.cc = [
Cc('test14@example.com', 'Example User14', p=1),
Cc('test15@example.com', 'Example User15', p=1)
]
message.bcc = Bcc('test16@example.com', 'Example User16', p=1)
message.bcc = [
Bcc('test17@example.com', 'Example User17', p=1),
message.header = Header('X-Test5', 'Test5', p=1)
message.header = Header('X-Test6', 'Test6', p=1)
message.header = [
Header('X-Test7', 'Test7', p=1),
Header('X-Test8', 'Test8', p=1)
]
message.substitution = Substitution('%name3%', 'Example Name 3', p=1)
message.substitution = Substitution('%city3%', 'Example City 3', p=1)
message.substitution = [
Substitution('%name4%', 'Example Name 4', p=1),
Substitution('%city4%', 'Example City 4', p=1)
]
message.custom_arg = CustomArg('marketing3', 'true', p=1)
message.custom_arg = CustomArg('transactional3', 'false', p=1)
message.custom_arg = [
CustomArg('marketing4', 'false', p=1),
CustomArg('transactional4', 'true', p=1)
]
message.send_at = SendAt(1461775052, p=1)
message.subject = Subject('Sending with SendGrid is Fun 1', p=1)
# The values below this comment are global to entire message
message.from_email = From('help@twilio.com', 'Twilio SendGrid')
message.reply_to = ReplyTo('help_reply@twilio.com', 'Twilio SendGrid Reply')
message.subject = Subject('Sending with SendGrid is Fun 2')
message.content = Content(MimeType.text, 'and easy to do anywhere, even with Python')
message.content = Content(MimeType.html, '<strong>and easy to do anywhere, even with
Python</strong>')
message.content = [
Content('text/calendar', 'Party Time!!'),
Content('text/custom', 'Party Time 2!!')
]
message.attachment = Attachment(FileContent('base64 encoded content 1'),
FileName('balance_001.pdf'),
FileType('application/pdf'),
Disposition('attachment'),
ContentId('Content ID 1'))
message.attachment = [
Attachment(FileContent('base64 encoded content 2'),
FileName('banner.png'),
FileType('image/png'),
Disposition('inline'),
ContentId('Content ID 2')),
Attachment(FileContent('base64 encoded content 3'),
FileName('banner2.png'),
FileType('image/png'),
Disposition('inline'),
ContentId('Content ID 3'))
]
message.template_id = TemplateId('13b8f94f-bcae-4ec6-b752-70d6cb59f932')
message.section = Section('%section1%', 'Substitution for Section 1 Tag')
message.section = [
Section('%section2%', 'Substitution for Section 2 Tag'),
Section('%section3%', 'Substitution for Section 3 Tag')
]
message.header = Header('X-Test9', 'Test9')
message.header = Header('X-Test10', 'Test10')
message.header = [
Header('X-Test11', 'Test11'),
Header('X-Test12', 'Test12')
]
message.category = Category('Category 1')
message.category = Category('Category 2')
message.category = [
Category('Category 1'),
Category('Category 2')
]
message.custom_arg = CustomArg('marketing5', 'false')
message.custom_arg = CustomArg('transactional5', 'true')
message.custom_arg = [
CustomArg('marketing6', 'true'),
CustomArg('transactional6', 'false')
]
message.send_at = SendAt(1461775053)
message.batch_id = BatchId("HkJ5yLYULb7Rj8GKSx7u025ouWVlMgAi")
message.asm = Asm(GroupId(1), GroupsToDisplay([1,2,3,4]))
message.ip_pool_name = IpPoolName("IP Pool Name")
mail_settings = MailSettings()
mail_settings.bcc_settings = BccSettings(False, BccSettingsTo("bcc@twilio.com"))
mail_settings.bypass_list_management = BypassListManagement(False)
mail_settings.footer_settings = FooterSettings(True, FooterText("w00t"),
FooterHtml("<string>w00t!<strong>"))
mail_settings.sandbox_mode = SandBoxMode(True)
mail_settings.spam_check = SpamCheck(True, SpamThreshold(5), SpamUrl("https://example.com"))
message.mail_settings = mail_settings
tracking_settings = TrackingSettings()
tracking_settings.click_tracking = ClickTracking(True, False)
tracking_settings.open_tracking = OpenTracking(True,
OpenTrackingSubstitutionTag("open_tracking"))
tracking_settings.subscription_tracking = SubscriptionTracking(
True,
SubscriptionText("Goodbye"),
SubscriptionHtml("<strong>Goodbye!</strong>"),
SubscriptionSubstitutionTag("unsubscribe"))
tracking_settings.ganalytics = Ganalytics(
True,
UtmSource("utm_source"),
UtmMedium("utm_medium"),
UtmTerm("utm_term"),
UtmContent("utm_content"),
UtmCampaign("utm_campaign"))
message.tracking_settings = tracking_settings
return message
def send_multiple_emails_personalized():
# Assumes you set your environment variable:
#
https://github.com/sendgrid/sendgrid-python/blob/HEAD/TROUBLESHOOTING.md#environment-variab
les-and-your-sendgrid-api-key
message = build_multiple_emails_personalized()
sendgrid_client = SendGridAPIClient(os.environ.get('SENDGRID_API_KEY'))
response = sendgrid_client.send(message=message)
print(response.status_code)
print(response.body)
print(response.headers)
def send_hello_email():
# Assumes you set your environment variable:
#
https://github.com/sendgrid/sendgrid-python/blob/HEAD/TROUBLESHOOTING.md#environment-variab
les-and-your-sendgrid-api-key
message = build_hello_email()
sendgrid_client = SendGridAPIClient(os.environ.get('SENDGRID_API_KEY'))
response = sendgrid_client.send(message=message)
print(response.status_code)
print(response.body)
print(response.headers)
def send_kitchen_sink():
# Assumes you set your environment variable:
#
https://github.com/sendgrid/sendgrid-python/blob/HEAD/TROUBLESHOOTING.md#environment-variab
les-and-your-sendgrid-api-key
message = build_kitchen_sink()
sendgrid_client = SendGridAPIClient(os.environ.get('SENDGRID_API_KEY'))
response = sendgrid_client.send(message=message)
print(response.status_code)
print(response.body)
print(response.headers)


Project Development Phase
Front end:
Index.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="./css/style.css">
<link rel="stylesheet" href="./css/common.css">
<title>Home</title>
</head>
<body>
<header id="home-header">
<ul>
<li><a href="./login.html">Login</a></li>
</ul>
</header>
<script src="./js/main.js"></script>
</body>
</html>
Login.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="stylesheet" href="./css/common.css" />
<link rel="stylesheet" href="./css/account-forms.css" />
<title>Login</title>
</head>
<body>
<form class="acc-form">
<h3>Login</h3>
<div>
<label for="email">Email
<span class="required-input">*</span>
</label>
<input type="email" name="email" id="email" class="acc-input" required />
</div>
<div>
<label for="password">Password
<span class="required-input">*</span>
</label>
<input type="password" name="password" id="password" class="acc-input" required />
</div>
<div>
<button type="submit" id="login-btn" class="btn acc-submit-btn">Login</button>
<p class="text-center">Not registered?
<a href="./register.html">Create an account</a>
</p>
</div>
</form>
</body>
</html>
Register.html
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="stylesheet" href="./css/common.css" />
<link rel="stylesheet" href="./css/account-forms.css" />
<title>Register</title>
</head>
<body>
<form class="acc-form">
<h3>Register</h3>
<div>
<label for="name">Name
<span class="required-input">*</span>
</label>
<input type="text" name="name" id="name" class="acc-input" required />
</div>
<div>
<label for="email">Email
<span class="required-input">*</span>
</label>
<input type="email" name="email" id="email" class="acc-input" required />
</div>
<div>
<label for="password">Password
<span class="required-input">*</span>
</label>
<input type="password" name="password" id="password" class="acc-input" required />
</div>
<div>
<label for="re-password">Re-password
<span class="required-input">*</span>
</label>
<input type="re-password" name="re-password" id="re-password" class="acc-input" required />
</div>
<div>
<label for="address">Address</label>
<textarea id="address" class="acc-input" rows="3"></textarea>
</div>
<div>
<button type="submit" id="register-btn" class="btn acc-submit-btn">Register</button>
<p class="text-center">Already registered?
<a href="./login.html">Login</a>
</p>
</div>
</form>
</body>
</html>
CSS files:
Account-forms.css
body {
background-image: linear-gradient(
to right top,
#7081c9,
#282682,
#0630eaeb,
#282682,
#7081c9
);
display: grid;
place-items: center;
}
.acc-form {
width: min(90%, 500px);
margin: 2rem 0;
padding: 3rem 2.5rem;
display: flex;
flex-direction: column;
background-color: var(--primary);
box-shadow: 3px 3px 15px #00000020, -3px -2px 30px #00000020;
}
.acc-form > * {
margin: 0.75rem 0;
}
.acc-input {
width: 100%;
padding: 0.75rem 1rem;
outline: none;
border: 2px solid #888;
margin-top: 0.5rem;
margin-bottom: 0.5rem;
}
.acc-input:focus {
border-color: var(--accent);
}
.acc-submit-btn {
width: 100%;
margin: 1rem 0 2rem;
padding: 0.75rem 1rem;
font-weight: bold;
}
.acc-form a {
color: var(--accent);
font-weight: bold;
}
.acc-form a:hover,
.acc-form a:focus {
color: var(--dark-ascent);
text-decoration: underline;
}
.acc-form > h3 {
text-transform: uppercase;
color: var(--accent);
font-size: 1.8rem;
text-align: center;
}
.required-input {
color: var(--accent);
font-weight: bold;
margin-left: 0.25rem;
}
textarea.acc-input {
resize: none;
}
Common.css
@import url("https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap");
*,
*::before,
*::after {
margin: 0;
padding: 0;
box-sizing: border-box;
}
:root {
--primary: #fff;
--secondary: #000;
--accent: #281996;
--dark-ascent: #281996;
}
body {
min-height: 100vh;
font-size: 1.2rem;
font-family: "Source Sans Pro", sans-serif;
}
li {
list-style: none;
}
a {
text-decoration: none;
color: inherit;
}
input,
button,
textarea {
font: inherit;
}
.btn {
color: var(--primary);
background-color: var(--accent);
border: none;
cursor: pointer;
transition: transform 0.25s ease, background-color 0.25s ease;
}
.btn:hover {
background-color: var(--dark-ascent);
transform: skew(2deg);
}
.text-center {
text-align: center;
}
Backend:
Requirements:
alembic==1.8.1
click==8.1.3
dnspython==2.2.1
email-validator==1.3.0
Flask==2.2.2
Flask-SQLAlchemy==3.0.2
Flask-WTF==1.0.1
greenlet==1.1.3.post0
ibm-db==3.1.3
ibm-db-sa==0.3.8
idna==3.4
itsdangerous==2.1.2
Jinja2==3.1.2
Mako==1.2.3
MarkupSafe==2.1.1
python-dotenv==0.21.0
SQLAlchemy==1.4.42
Werkzeug==2.2.2
WTForms==3.0.1
Wsgi.py
from application import create_app
app = create_app()
if __name__ == '__main__':
app.run()
Config.py
from dotenv import load_dotenv
load_dotenv()
import os
basedir = os.path.abspath(os.path.dirname(__file__))
CONFIG_OBJECT_NAME = os.getenv('CONFIG_OBJECT_NAME', 'config.DevelopmentConfig')
class Config():
SECRET_KEY = os.urandom(24)
SQLALCHEMY_TRACK_MODIFICATIONS = False
API_VERSION_PREFIX = os.getenv('API_VERSION_PREFIX', '/api/v1/')
class DevelopmentConfig(Config):
SQLALCHEMY_ECHO = True
SQLALCHEMY_DATABASE_URI = f'sqlite:///{os.path.join(basedir, "app.db")}'
class ProductionConfig(Config):
SQLALCHEMY_DATABASE_URI = os.getenv('DB_URL')
Lib
Response.py
from flask import jsonify
class Response():
@staticmethod
def success(data):
response = {
'status': 'success',
'data': data
}
return jsonify(response), 200
@staticmethod
def error(data, error_code):
response = {
'status': 'error',
'code': error_code,
'data': data
}
return jsonify(response), error_code
Application
__init__.py
import ibm_db_sa
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from config import CONFIG_OBJECT_NAME
db = SQLAlchemy()
def create_app():
app = Flask(__name__)
app.config.from_object(CONFIG_OBJECT_NAME)
db.init_app(app)
from application.auth.routes import auth_blueprint
app.register_blueprint(auth_blueprint, url_prefix=app.config['API_VERSION_PREFIX'])
with app.app_context():
db.create_all()
return app
Auth
Controllers.py
from application import db
from application.auth.forms import RegistrationForm, LoginForm
from application.auth.models import Retailer
from lib.response import Response
def register():
form = RegistrationForm()
if form.validate():
retailer_data = {}
retailer_data['name'] = form.name.data
retailer_data['email'] = form.email.data
retailer_data['address'] = form.address.data
retailer = Retailer(**retailer_data)
retailer.set_password(form.password.data)
db.session.add(retailer)
db.session.commit()
return Response.success(data=retailer.id)
return Response.error(data=form.errors, error_code=500)
def login():
form = LoginForm()
if form.validate():
retailer = Retailer.query.filter_by(name=form.name.data).first()
if retailer is None or not retailer.check_password(form.password.data):
return Response.error(data='login error', error_code=500)
return Response.success(data='login success', error_code=500)
return Response.error(data=form.errors, error_code=500)
Forms.py
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Email, EqualTo, ValidationError
from application.auth.models import Retailer
class RegistrationForm(FlaskForm):
name = StringField('Name', validators=[DataRequired()])
email = StringField('Email', validators=[DataRequired(), Email()])
address = StringField('Address', validators=[DataRequired()])
password = PasswordField('Password', validators=[DataRequired()])
repeat_password = PasswordField('Repeat Password', validators=[DataRequired(), EqualTo('password')])
def validate_username(self, name):
user = Retailer.query.filter_by(name=name.data).first()
if user is not None:
raise ValidationError('Please use a different username.')
def validate_email(self, email):
user = Retailer.query.filter_by(email=email.data).first()
if user is not None:
raise ValidationError('Please use a different email address.')
class LoginForm(FlaskForm):
username = StringField('Username', validators=[DataRequired()])
password = PasswordField('Password', validators=[DataRequired()])
Models.py
from email.policy import default
from application import db
from werkzeug.security import generate_password_hash, check_password_hash
class Retailer(db.Model):
__tablename__ = 'retailers'
id = db.Column(db.Integer, primary_key=True, nullable=False, autoincrement=True)
name = db.Column(db.String(100), nullable=False)
email = db.Column(db.String(100), index=True, unique=True, nullable=False)
address = db.Column(db.String(300), nullable=True)
password_hash = db.Column(db.String(200), nullable=False)
is_active = db.Column(db.Boolean, nullable=True)
def set_password(self, password):
self.password_hash = generate_password_hash(password)
def check_password(self, password):
return check_password_hash(self.password_hash, password)
Routes.py
from flask import Blueprint
from application.auth.controllers import register, login
auth_blueprint = Blueprint('auth', __name__)
auth_blueprint.add_url_rule(rule='/register',
view_func=register,
endpoint='register',
methods=['POST'])
auth_blueprint.add_url_rule(rule='/login',
view_func=login,
endpoint='login',
methods=['POST'])
Docker file
FROM python:3.10-slim-buster
WORKDIR /app
COPY requirements.txt requirements.txt
RUN apt update
RUN apt install build-essential -y
RUN pip3 install --upgrade pip
RUN pip3 install -r requirements.txt
COPY . .
CMD ["python3", "-m" , "flask", "run", "--host=0.0.0.0"]
















